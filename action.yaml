---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# python-test-action
name: "üß™ Python Test"
description: "Test a Python Project, generate coverage report"

inputs:
  # Mandatory
  PYTHON_VERSION:
    # A matrix Python build version should be passed as input
    description: "Python version used to run test"
    required: true
    type: string
  # Optional
  PERMIT_FAIL:
    description: "Continue even when one or more tests fails"
    required: false
    type: boolean
    default: false
  REPORT_ARTEFACT:
    description: "Uploads test/coverage report bundle as artefact"
    required: false
    type: boolean
    default: true
  PATH_PREFIX:
    description: "Directory location containing Python project code"
    type: string
    required: false
  TESTS_PATH:
    description: "Path relative to the project folder containing tests"
    required: false
    type: string
  TOX_TESTS:
    description: "Uses tox to perform tests"
    required: false
    type: boolean
    default: false
  TOX_ENVS:
    description: "Space separated list of tox environments to run"
    required: false
    type: string
    default: "lint tests"

runs:
  using: "composite"
  steps:
    - name: "Setup action/environment"
      shell: bash
      run: |
        # Setup action/environment
        if [ -z "${{ inputs.python_version }}" ]; then
          echo "Error: Python version was not provided ‚ùå"; exit 1
        else
          echo "Using Python: ${{ inputs.python_version }} üêç"
        fi

        # Handle path_prefix input consistently and when absent
        path_prefix="${{ inputs.PATH_PREFIX }}"
        if [ -z "$path_prefix" ]; then
          # Set current directory as path prefix
          path_prefix="."
        else
          #¬†Strip any trailing slash in provided path
          path_prefix="${path_prefix%/}"
        fi
        # Verify is a valid directory path
        if [ ! -d "$path_prefix" ]; then
          echo "Error: invalid path/prefix to project directory ‚ùå"; exit 1
        fi
        echo "path_prefix=$path_prefix" >> "$GITHUB_ENV"

        if [ "f${{ inputs.PERMIT_FAIL }}" = "ftrue" ]; then
          echo "Warning: test failures will be permitted ‚ö†Ô∏è"
        fi

        if [ "f${{ inputs.TOX_TESTS }}" = "ftrue" ]; then
          echo "Using tox to perform tests üí¨"
          if [ -z "${{ inputs.TOX_ENVS }}" ]; then
            echo "Error: no tox environments were specified ‚ùå"; exit 1
          else
            echo "Tox environments: ${{ inputs.TOX_ENVS }} üí¨"
          fi
        fi

        # Check/setup test path
        if [ -n "${{ inputs.tests_path }}" ] && \
          [ ! -d "$path_prefix/${{ inputs.tests_path }}" ]; then
          echo "Error: invalid path/prefix to test directory ‚ùå"
          echo "$path_prefix/${{ inputs.tests_path }}"; exit 1
        fi
        if [ -n "${{ inputs.tests_path }}" ]; then
          TESTS_PATH="$path_prefix/${{ inputs.tests_path }}"
        #¬†Otherwise search/use common locations
        elif [ -d "$path_prefix/test" ]; then
          TESTS_PATH="$path_prefix/test"
        elif [ -d "$path_prefix/tests" ]; then
          TESTS_PATH="$path_prefix/tests"
        else
          echo "Error: could not determine path to tests ‚ùå"; exit 1
        fi
        echo "Tests path: $TESTS_PATH üí¨"
        echo "tests_path=$TESTS_PATH" >> "$GITHUB_ENV"

    - name: "Check for tox configuration file"
      if: inputs.TOX_TESTS == 'true'
      id: tox-config
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/path-check-action@554ef2267e6810ab7ac56506c8c1fd00725d59b1 # v0.1.0
      with:
        path: "${{ env.path_prefix }}/tox.ini"

    - name: "Tox configuration file missing"
      # yamllint disable-line rule:line-length
      if: steps.tox-config.outputs.type != 'file' && inputs.TOX_TESTS == 'true'
      shell: bash
      run: |
        # Tox configuration file missing
        echo "Error: tox configuration file missing ‚ùå"; exit 1

    - name: "Set up Python ${{ inputs.python_version }}"
      # yamllint disable-line rule:line-length
      uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
      with:
        python-version: ${{ inputs.python_version }}

    - name: "Performing tests [tox]"
      if: steps.tox-config.outputs.type == 'file' && inputs.TOX_TESTS == 'true'
      shell: bash
      run: |
        # Performing tests [tox]
        echo "Installing: tox ‚¨áÔ∏è"
        pip install --disable-pip-version-check -q tox
        for ENV in ${{ inputs.TOX_ENVS }}; do
          echo "Running: tox -c ${{ env.path_prefix }}/tox.ini -e $ENV üí¨"
          tox -c ${{ env.path_prefix }}/tox.ini -e "$ENV"
        done

    - name: "Tests and coverage report [pytest]"
      if: inputs.TOX_TESTS != 'true'
      shell: bash
      run: |
        # Tests and coverage report [pytest]
        echo "Installing: pytest, pytest-cov ‚¨áÔ∏è"
        pip install --disable-pip-version-check -q pytest pytest-cov

        echo "Install project and dependencies"
        if [ -f ${{ env.path_prefix }}/pyproject.toml ]; then
            echo "Source: ${{ env.path_prefix }}/pyproject.toml ‚¨áÔ∏è"
            pip install -q "${{ env.path_prefix }}/"
        elif [ -f ${{ env.path_prefix }}/requirements.txt ]; then
          echo "Source: ${{ env.path_prefix }}/requirements.txt ‚¨áÔ∏è"
          pip install -q -r "${{ env.path_prefix }}/requirements.txt"
        fi
          echo "Running tests in: ${{ env.tests_path }} üß™"
        if [ "f${{ inputs.permit_fail }}" = 'ftrue' ]; then
          echo "Warning: flag set to permit test failures ‚ö†Ô∏è"
          pytest --cov --cov-report=html:coverage_report \
            ${{ env.tests_path }} || true
        else
          pytest --cov --cov-report=html:coverage_report ${{ env.tests_path }}
        fi

    - name: "Create ZIP archive of coverage report"
      if: inputs.REPORT_ARTEFACT == 'true'
      shell: bash
      run: |
        # Create ZIP archive of coverage report
        if [ -d coverage_report ]; then
          echo "Creating ZIP file of HTML coverage report"
          zip -r test_coverage_report-${{ inputs.PYTHON_VERSION }}.zip \
            coverage_report
        else
          echo "No coverage report directory exists"
        fi

    - name: "Upload test/coverage report"
      # yamllint disable-line rule:line-length
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: inputs.REPORT_ARTEFACT == 'true'
      with:
        name: test_coverage_report-${{ inputs.python_version }}.zip
        path: test_coverage_report-${{ inputs.python_version }}.zip
        retention-days: 90
